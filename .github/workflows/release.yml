name: Publish 

on:
  push:
    tags:
    - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:

  linux_amd64:
    name: x86_64-unknown-linux-musl
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          override: true
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build 
          args: --target x86_64-unknown-linux-musl --release
      - name: Upload 
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-unknown-linux-musl 
          path: target/x86_64-unknown-linux-musl/release/grafana-tokio-console-datasource
          if-no-files-found: error

  linux_arm64:
    name: aarch64-unknown-linux-musl
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-unknown-linux-musl
          override: true
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: install
          args: cross --git https://github.com/rust-embedded/cross
      - run: cross build --target aarch64-unknown-linux-musl --release
      - name: Upload 
        uses: actions/upload-artifact@v3
        with:
          name: aarch64-unknown-linux-musl 
          path: target/aarch64-unknown-linux-musl/release/grafana-tokio-console-datasource
          if-no-files-found: error

  linux_arm:
    name: armv7-unknown-linux-musleabihf 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: armv7-unknown-linux-musleabihf
          override: true
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: install
          args: cross
      - run: cross build --target armv7-unknown-linux-musleabihf --release
      - name: Upload 
        uses: actions/upload-artifact@v3
        with:
          name: armv7-unknown-linux-musleabihf 
          path: target/armv7-unknown-linux-musleabihf/release/grafana-tokio-console-datasource
          if-no-files-found: error

  windows_amd64:
    name: x86_64-pc-windows-gnu 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-gnu
          override: true
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build 
          args: --target x86_64-pc-windows-gnu --release
      - name: Upload 
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-pc-windows-gnu
          path: target/x86_64-pc-windows-gnu/release/grafana-tokio-console-datasource.exe
          if-no-files-found: error

  darwin_amd64:
    name: x86_64-apple-darwin
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: build 
          args:  --target x86_64-apple-darwin --release
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-apple-darwin
          path: target/x86_64-apple-darwin/release/grafana-tokio-console-datasource
          if-no-files-found: error

  darwin_arm64:
    name: aarch64-apple-darwin
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: build 
          args:  --target aarch64-apple-darwin --release
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: aarch64-apple-darwin
          path: target/aarch64-apple-darwin/release/grafana-tokio-console-datasource
          if-no-files-found: error

  release:
    name: release
    needs: [darwin_amd64, darwin_arm64, linux_amd64, linux_arm, linux_arm64, windows_amd64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
        with:
          node-version: "14.x"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn cache
        uses: actions/cache@v2
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build and test frontend
        run: yarn build

      - name: Download
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Get plugin metadata
        id: metadata
        run: |
          sudo apt-get install jq
          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_EXECUTABLE=$(cat dist/plugin.json | jq -r .executable)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_TYPE=$(cat dist/plugin.json | jq -r .type)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip
          export GRAFANA_PLUGIN_ARTIFACT_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT}.md5
          echo "::set-output name=plugin-id::${GRAFANA_PLUGIN_ID}"
          echo "::set-output name=plugin-executable::${GRAFANA_PLUGIN_EXECUTABLE}"
          echo "::set-output name=plugin-version::${GRAFANA_PLUGIN_VERSION}"
          echo "::set-output name=plugin-type::${GRAFANA_PLUGIN_TYPE}"
          echo "::set-output name=archive::${GRAFANA_PLUGIN_ARTIFACT}"
          echo "::set-output name=archive-checksum::${GRAFANA_PLUGIN_ARTIFACT_CHECKSUM}"
          echo ::set-output name=github-tag::${GITHUB_REF#refs/*/}

      - name: Copy artifacts to dist
        run: |
          cp artifacts/aarch64-apple-darwin/${{ steps.metadata.outputs.plugin-executable }} dist/${{ steps.metadata.outputs.plugin-executable }}_darwin_arm64
          cp artifacts/x86_64-apple-darwin/${{ steps.metadata.outputs.plugin-executable }} dist/${{ steps.metadata.outputs.plugin-executable }}_darwin_amd64

          cp artifacts/aarch64-unknown-linux-musl/${{ steps.metadata.outputs.plugin-executable }} dist/${{ steps.metadata.outputs.plugin-executable }}_linux_arm64
          cp artifacts/armv7-unknown-linux-musleabihf/${{ steps.metadata.outputs.plugin-executable }} dist/${{ steps.metadata.outputs.plugin-executable }}_linux_arm
          cp artifacts/x86_64-unknown-linux-musl/${{ steps.metadata.outputs.plugin-executable }} dist/${{ steps.metadata.outputs.plugin-executable }}_linux_amd64

          cp artifacts/x86_64-pc-windows-gnu/${{ steps.metadata.outputs.plugin-executable }}.exe dist/${{ steps.metadata.outputs.plugin-executable }}_windows_amd64.exe

      # - name: Sign plugin
      #   run: yarn sign
      #   env:
      #     GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}

      - name: Read changelog
        id: changelog
        run: |
          awk '/^## / {s++} s == 1 {print}' CHANGELOG.md > release_notes.md
          echo "::set-output name=path::release_notes.md"

      # - name: Check package version
      #   run: if [ "v${{ steps.metadata.outputs.plugin-version }}" != "${{ steps.metadata.outputs.github-tag }}" ]; then printf "\033[0;31mPlugin version doesn't match tag name\033[0m\n"; exit 1; fi

      - name: Package plugin
        id: package-plugin
        run: |
          mv dist ${{ steps.metadata.outputs.plugin-id }}
          zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r
          md5sum ${{ steps.metadata.outputs.archive }} > ${{ steps.metadata.outputs.archive-checksum }}
          echo "::set-output name=checksum::$(cat ./${{ steps.metadata.outputs.archive-checksum }} | cut -d' ' -f1)"

      - name: Upload plugin artifact
        uses: actions/upload-artifact@v3
        with:
          name: plugin.zip
          path: ${{ steps.metadata.outputs.archive }}
          if-no-files-found: error

      # - name: Lint plugin
      #   uses: grafana/plugin-validator@06f4f8c5a0b9fe6d5641ce6cbd6d439f4082378b

      # - name: Create release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     body_path: ${{ steps.changelog.outputs.path }}
      #     draft: true

      # - name: Add plugin to release
      #   id: upload-plugin-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./${{ steps.metadata.outputs.archive }}
      #     asset_name: ${{ steps.metadata.outputs.archive }}
      #     asset_content_type: application/zip

      # - name: Add checksum to release
      #   id: upload-checksum-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./${{ steps.metadata.outputs.archive-checksum }}
      #     asset_name: ${{ steps.metadata.outputs.archive-checksum }}
      #     asset_content_type: text/plain

      # - name: Publish to Grafana.com
      #   run: |
      #     echo A draft release has been created for your plugin. Please review and publish it. Then submit your plugin to grafana.com/plugins by opening a PR to https://github.com/grafana/grafana-plugin-repository with the following entry:
      #     echo
      #     echo '{ "id": "${{ steps.metadata.outputs.plugin-id }}", "type": "${{ steps.metadata.outputs.plugin-type }}", "url": "https://github.com/${{ github.repository }}", "versions": [ { "version": "${{ steps.metadata.outputs.plugin-version }}", "commit": "${{ github.sha }}", "url": "https://github.com/${{ github.repository }}", "download": { "any": { "url": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.metadata.outputs.plugin-version }}/${{ steps.metadata.outputs.archive }}", "md5": "${{ steps.package-plugin.outputs.checksum }}" } } } ] }' | jq .
